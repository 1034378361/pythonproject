---
description: 综合的Python代码标准，包含编码风格、命名、格式和质量标准，确保代码一致性和可维护性。
globs: ["**/*.py"]
alwaysApply: true
---
# Python编码标准

## 项目代码质量工具链

项目使用以下工具维护代码质量：

1. **格式化工具**：
   - **Black**：自动格式化代码，行长限制为88字符
   - **isort**：整理导入语句，配置为兼容Black

2. **静态分析工具**：
   - **Ruff**：快速Python linter，检查常见错误
   - **mypy**：静态类型检查器，确保类型注解的一致性
   - **pydocstyle**：文档字符串风格检查

3. **安全分析**：
   - **Bandit**：检查安全漏洞

4. **自动化**：
   - **pre-commit**：在提交前自动运行以上工具

## 代码风格规范

按照项目配置（pyproject.toml和.pre-commit-config.yaml）：

- 使用4个空格缩进
- 行长不超过88个字符（Black默认）
- 使用Google风格的文档字符串
- 使用英文编写注释和文档
- 导入顺序遵循isort配置：标准库、第三方库、本地库
- 所有新代码应包含类型注解

## 命名约定

- 变量、函数和方法使用小写snake_case
- 类名使用CamelCase（首字母大写）
- 常量使用大写SNAKE_CASE
- 名称应清晰表达意图，避免不必要的缩写
- 私有方法/属性以单下划线开头（`_method`）

## 类型注解最佳实践

项目使用mypy进行静态类型检查，遵循以下规则：

- 为所有函数和方法添加参数和返回值类型注解
- 使用类型别名简化复杂类型（`from typing import TypeAlias`）
- 对第三方库缺失的类型使用 types-* 包（如项目中的types-requests）
- 在测试代码中允许更宽松的类型规则

## 文档字符串格式

项目使用Google风格文档字符串：

```python
def function_name(param1: str, param2: int) -> bool:
    """简短的函数描述（一行）。

    更详细的函数描述，可包含多行。

    Args:
        param1: 第一个参数的描述
        param2: 第二个参数的描述

    Returns:
        返回值描述

    Raises:
        ValueError: 描述可能引发的异常情况
    """
```

## 代码组织原则

- 相关功能应分组在同一模块中
- 每个文件应有明确的职责，避免过大的文件
- 遵循单一职责原则
- 优先使用组合而非继承
- 代码重复应提取为共享函数或类

## 错误处理

- 使用具体的异常类型而非通用Exception
- 提供有用的错误消息，包含上下文信息
- 避免空的except块
- 使用finally块确保资源正确释放
