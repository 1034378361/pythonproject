---
description: 定义Python项目中的技术最佳实践，包括错误处理、日志记录和配置管理，确保代码的健壮性和可维护性。
globs: ["**/*.py"]
alwaysApply: true
---
# Python技术实践

## 错误处理

### 异常处理原则

- 只捕获你能处理的异常，避免空的except块
- 尽可能使用特定的异常类型，避免捕获所有异常
- 在适当的抽象层次处理异常，避免在低层函数中吞噬异常
- 使用finally块确保资源被正确释放
- 在自动测试中包含异常测试案例

### 自定义异常

- 为特定领域问题创建自定义异常类
- 自定义异常应从标准异常类继承
- 异常命名应以"Error"结尾
- 提供有意义的错误消息和上下文信息
- 文档说明异常可能的触发条件

### 错误上下文

- 提供丰富的错误上下文，包括相关变量的值
- 使用f-string或格式化字符串提供详细错误信息
- 在重新抛出异常时保留原始异常信息
- 在API边界使用适当的错误代码和消息

## 日志记录

项目使用Python标准库的logging模块进行日志记录。

### 日志级别使用

- DEBUG: 详细的调试信息，通常仅在开发中使用
- INFO: 确认事情按预期工作的消息
- WARNING: 表示可能出现问题的警告
- ERROR: 由于问题导致程序未能执行某些功能
- CRITICAL: 表示程序本身可能无法继续运行的错误

### 日志最佳实践

- 在模块级别获取和配置logger：`logger = logging.getLogger(__name__)`
- 使用结构化日志记录，包含上下文信息
- 记录重要操作的开始和结束，包括持续时间
- 在关键业务流程中记录详细信息
- 避免在日志中包含敏感数据（密码、令牌等）

### 日志配置

项目基础配置位于`src/pythonproject/__init__.py`中：

```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
```

## 配置管理

### 配置方法

项目支持以下几种配置方式：

1. **内置默认值**：程序中定义的默认设置
2. **配置文件**：可选的配置文件载入
3. **环境变量**：优先级高于配置文件
4. **命令行参数**：最高优先级（如果使用CLI）

### 配置最佳实践

- 将配置与代码分离
- 使用环境变量存储敏感信息和环境特定的配置
- 为不同环境（开发、测试、生产）提供不同的配置
- 在加载时验证配置的完整性和有效性
- 使用类型注解确保配置值类型正确
